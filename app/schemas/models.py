"""
Core schema definitions for the Report-Building Agent using Pydantic.

This module contains the structured output schemas for data validation and type constraints.
It includes AnswerResponse and UserIntent schemas as specified in the project requirements.
"""

from pydantic import BaseModel, Field
from typing import List, Literal
from datetime import datetime


class AnswerResponse(BaseModel):
    """
    Schema for encapsulating the response that the agent provides to the user.
    
    Attributes:
        question (str): The question asked by the user.
        answer (str): The response generated by the agent.
        sources (List[str]): A list of sources or documents that the answer is based on.
        confidence (float): A score indicating how confident the agent is in its answer (0.0 to 1.0).
        timestamp (datetime): The time when the response was generated.
    """
    question: str
    answer: str
    sources: List[str]
    confidence: float = Field(ge=0.0, le=1.0, description="Confidence score between 0 and 1")
    timestamp: datetime = Field(default_factory=datetime.now, description="Response generation timestamp")

    model_config = {
        "json_encoders": {
            datetime: lambda v: v.isoformat()
        }
    }


class UserIntent(BaseModel):
    """
    Schema for capturing the intent of the user's request.
    
    Attributes:
        intent_type (Literal): The type of intent - restricted to valid options.
        confidence (float): A score indicating the agent's confidence in the identified intent (0.0 to 1.0).
        reasoning (str): A brief explanation of why the agent classified the intent in a certain way.
    """
    intent_type: Literal["qa", "summarization", "calculation"] = Field(
        description="Type of user intent: question answering, summarization, or calculation"
    )
    confidence: float = Field(ge=0.0, le=1.0, description="Confidence score between 0 and 1")
    reasoning: str = Field(description="Explanation of the intent classification")

    model_config = {
        "use_enum_values": True
    }


# Example usage and validation
if __name__ == "__main__":
    # Example AnswerResponse
    answer_response = AnswerResponse(
        question="What is the capital of France?",
        answer="The capital of France is Paris.",
        sources=["Wikipedia", "Encyclopedia Britannica"],
        confidence=0.95
    )
    print("AnswerResponse example:")
    print(answer_response.model_dump_json(indent=2))
    print()

    # Example UserIntent
    user_intent = UserIntent(
        intent_type="qa",
        confidence=0.89,
        reasoning="The user is asking a direct question that requires a factual answer."
    )
    print("UserIntent example:")
    print(user_intent.model_dump_json(indent=2))
    print()

    # Demonstrate validation
    try:
        # This should raise a validation error due to confidence > 1.0
        invalid_response = AnswerResponse(
            question="Test question",
            answer="Test answer",
            sources=["Test source"],
            confidence=1.5  # Invalid confidence value
        )
    except Exception as e:
        print(f"Validation error caught: {e}")
